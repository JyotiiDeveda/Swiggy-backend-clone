openapi: 3.0.0
info:
  title: Restaurant Management API
  version: 1.0.0
  description: API for managing restaurants, dishes, and ratings.
servers:
  - url: http://localhost:3000/api
    description: Local server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Restaurant:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        category:
          type: string
        address:
          type: object
          properties:
            city:
              type: string
    Dish:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        type:
          type: string
        price:
          type: number
    Rating:
      type: object
      properties:
        id:
          type: string
        score:
          type: number
        comment:
          type: string
    Error:
      type: object
      properties:
        message:
          type: string
        statusCode:
          type: integer

security:
  - bearerAuth: []

paths:
  /restaurants:
    paths:
  /restaurants:
    post:
      tags:
        - Restaurants
      summary: Create a new restaurant
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Restaurant name
                  example: "The Gourmet Kitchen"
                description:
                  type: string
                  description: A description for the restaurant
                  example: "A cozy place offering a variety of international cuisines."
                category:
                  type: string
                  description: Restaurant type
                  enum:
                    - veg
                    - non-veg
                    - both
                  example: "veg"
                address:
                  type: object
                  description: Address of the restaurant
                  properties:
                    city:
                      type: string
                      description: City where the restaurant is located
                      example: "Metropolis"
                    state:
                      type: string
                      description: State where the restaurant is located
                      example: "California"
                    pincode:
                      type: string
                      description: Postal code of the restaurant's location
                      example: "90210"
              required:
                - name
                - description
                - category
                - address
      responses:
        '201':
          description: Restaurant created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    description: Unique identifier of the created restaurant
                    example: 1
                  name:
                    type: string
                    description: Name of the restaurant
                    example: "The Gourmet Kitchen"
                  description:
                    type: string
                    description: Description of the restaurant
                    example: "A cozy place offering a variety of international cuisines."
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid input data"

    get:
      tags:
        - Restaurants
      summary: Fetch all restaurants
      parameters:
        - name: city
          in: query
          schema:
            type: string
          description: Filter by city
          example: "Metropolis"
      responses:
        '200':
          description: List of restaurants fetched successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      description: Unique identifier of the restaurant
                      example: 1
                    name:
                      type: string
                      description: Name of the restaurant
                      example: "The Gourmet Kitchen"
                    description:
                      type: string
                      description: Description of the restaurant
                      example: "A cozy place offering a variety of international cuisines."
        '404':
          description: No restaurants found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "No restaurants found in the specified city"

  /restaurants/{id}:
    get:
      tags:
        - Restaurants
      summary: Fetch a restaurant by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Restaurant ID
      responses:
        '200':
          description: Restaurant details
          content:
            application/json:
              schema:
        '404':
          description: Restaurant not found
    put:
      tags:
        - Restaurants
      security:
        - bearerAuth: []
      summary: Update a restaurant
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Restaurant ID
            example: "123"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Updated name of the restaurant
                  example: "The Gourmet Kitchen Updated"
                description:
                  type: string
                  description: Updated description of the restaurant
                  example: "A revamped cozy place with international cuisines."
                category:
                  type: string
                  description: Updated restaurant type
                  enum:
                    - veg
                    - non-veg
                    - both
                  example: "veg"
                address:
                  type: object
                  description: Updated address of the restaurant
                  properties:
                    city:
                      type: string
                      description: City of the restaurant
                      example: "Gotham"
                    state:
                      type: string
                      description: State of the restaurant
                      example: "New York"
                    pincode:
                      type: string
                      description: Postal code of the restaurant's location
                      example: "10001"
              required:
                - name
                - description
      responses:
        '200':
          description: Restaurant updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    description: Unique identifier of the restaurant
                    example: "123"
                  name:
                    type: string
                    description: Updated name of the restaurant
                    example: "The Gourmet Kitchen Updated"
                  description:
                    type: string
                    description: Updated description of the restaurant
                    example: "A revamped cozy place with international cuisines."
        '404':
          description: Restaurant not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message
                    example: "Restaurant not found"

    delete:
      tags:
        - Restaurants
      summary: Delete a restaurant
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Restaurant ID
      responses:
        '204':
          description: Restaurant deleted

  /restaurants/{id}/dishes:
    post:
      tags:
        - Restaurants
      security:
        - bearerAuth: []
      summary: Add a dish to a restaurant
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Restaurant ID
          example: "123"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Name of the dish
                  example: "Spaghetti Carbonara"
                description:
                  type: string
                  description: Description of the dish
                  example: "Classic Italian pasta dish with creamy sauce."
                price:
                  type: number
                  format: float
                  description: Price of the dish
                  example: 12.99
                category:
                  type: string
                  description: Category of the dish
                  example: "Main Course"
              required:
                - name
                - price
      responses:
        '201':
          description: Dish created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    description: Unique identifier of the dish
                    example: "987"
                  name:
                    type: string
                    description: Name of the dish
                    example: "Spaghetti Carbonara"
                  description:
                    type: string
                    description: Description of the dish
                    example: "Classic Italian pasta dish with creamy sauce."
                  price:
                    type: number
                    format: float
                    description: Price of the dish
                    example: 12.99
                  category:
                    type: string
                    description: Category of the dish
                    example: "Main Course"
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message
                    example: "Invalid input data."

    get:
      tags:
        - Restaurants
      summary: Fetch all dishes for a restaurant
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Restaurant ID
      responses:
        '200':
          description: List of dishes
          content:
            application/json:
              schema:
                type: array
                items:

  /restaurants/{restaurantId}/dishes/{dishId}:
    get:
      tags:
        - Restaurants
      summary: Get a specific dish
      parameters:
        - name: restaurantId
          in: path
          required: true
          schema:
            type: string
        - name: dishId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Dish details
          content:
            application/json:
              schema:

  /restaurants/{restaurantId}/ratings:
    post:
      tags:
        - Restaurants
      security:
        - bearerAuth: []
      summary: Add a rating for a restaurant
      parameters:
        - name: restaurantId
          in: path
          required: true
          schema:
            type: string
          description: ID of the restaurant for which the rating is being added
          example: "123"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                rating:
                  type: number
                  format: float
                  description: Rating value (e.g., 1 to 5)
                  example: 4.5
                comment:
                  type: string
                  description: Optional comment accompanying the rating
                  example: "Great food and quick service!"
              required:
                - rating
      responses:
        '201':
          description: Rating added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Rating added successfully."
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid rating value."
        '404':
          description: Restaurant not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Restaurant not found."


  /restaurants/{restaurantId}/ratings/{ratingId}:
    delete:
      tags:
        - Restaurants
      summary: Delete a restaurant rating
      security:
        - bearerAuth: []
      parameters:
        - name: restaurantId
          in: path
          required: true
          schema:
            type: string
        - name: ratingId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Rating deleted
