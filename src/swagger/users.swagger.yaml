paths:
  /users/me:
    get:
      summary: Fetch logged in user's details
      tags:
        - Users
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Fetched user details successfully
        '403':
          description: Unauthorized
        '404':
          description: User not found
  /users:
    get:
      summary: Fetch all users
      tags:
        - Users
      security:
        - BearerAuth: []
      parameters:
        - name: role
          in: query
          description: Filter users by role
          schema:
            type: string
            enum: [admin, delivery-partner, customer]
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
            example: 1
        - name: limit
          in: query
          description: Number of users per page
          schema:
            type: integer
            example: 10
      responses:
        '200':
          description: Fetched all users successfully
        '404':
          description: No users found
    post:
      tags:
        - Users
      summary: Create a new user (Admin Only)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  description: First name of the user
                  example: John
                lastName:
                  type: string
                  description: Last name of the user
                  example: Doe
                email:
                  type: string
                  description: Email address of the user
                  format: email
                  example: john.doe@example.com
                phone:
                  type: string
                  description: Phone number of the user
                  example: '1234567890'
                address:
                  type: string
                  description: Address of the user
                  example: '123 Main Street, New York, NY'
                roleId:
                  type: string
                  description: Role Id of the user
                  example: 1234
              required:
                - firstName
                - lastName
                - email
                - phone
                - role
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User created successfully
                  data:
                    type: object
                    description: The created user's details
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '409':
          description: Conflict - User already exists
        '422':
          description: Validation error

  /users/{id}:
    get:
      summary: Fetch user details
      tags:
        - Users
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: string
      responses:
        '200':
          description: Fetched user details successfully
        '403':
          description: Unauthorized
        '404':
          description: User not found
    put:
      tags:
        - Users
      summary: Update a user profile
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: '123'
          description: ID of the user to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  description: First name of the user
                  example: John
                lastName:
                  type: string
                  description: Last name of the user
                  example: Doe
                email:
                  type: string
                  description: Email address of the user
                  format: email
                  example: john.doe@example.com
                phone:
                  type: string
                  description: Phone number of the user
                  example: '1234567890'
                address:
                  type: string
                  description: Address of the user
                  example: '123 Main Street, New York, NY'
                role:
                  type: string
                  description: Role of the user
                  enum:
                    - Admin
                    - Customer
                    - Delivery Partner
                  example: Customer
                
              required:
                - firstName
                - lastName
                - email
                - phone
      responses:
        '200':
          description: User profile updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User profile updated successfully
                  data:
                    type: object
                    description: The updated user's details
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: User not found
        '422':
          description: Validation error

    delete:
      summary: Remove user account
      tags:
        - Users
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: string
      responses:
        '204':
          description: Account removed successfully
        '403':
          description: Unauthorized
        '404':
          description: User not found

    

  /users:
    get:
      summary: Fetch all users
      tags:
        - Users
      security:
        - BearerAuth: []
      parameters:
        - name: role
          in: query
          description: Filter users by role
          schema:
            type: string
            enum: [admin, delivery-partner, customer]
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
            example: 1
        - name: limit
          in: query
          description: Number of users per page
          schema:
            type: integer
            example: 10
      responses:
        '200':
          description: Fetched all users successfully
        '404':
          description: No users found
    post:
      tags:
        - Users
      summary: Create a new user (Admin Only)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  description: First name of the user
                  example: John
                lastName:
                  type: string
                  description: Last name of the user
                  example: Doe
                email:
                  type: string
                  description: Email address of the user
                  format: email
                  example: john.doe@example.com
                phone:
                  type: string
                  description: Phone number of the user
                  example: '1234567890'
                address:
                  type: string
                  description: Address of the user
                  example: '123 Main Street, New York, NY'
                role:
                  type: string
                  description: Role of the user
                  enum:
                    - ADMIN
                    - CUSTOMER
                  example: CUSTOMER
              required:
                - firstName
                - lastName
                - email
                - phone
                - role
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User created successfully
                  data:
                    type: object
                    description: The created user's details
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '409':
          description: Conflict - User already exists
        '422':
          description: Validation error

  /users/{userId}/assign-role:
    put:
      summary: Assign role to a user
      tags:
        - Roles
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          description: User ID
          schema:
            type: string
      requestBody:
        description: User role details
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                roleId:
                  type: string
                  required: true
                  example: '123'
      responses:
        '201':
          description: Role assigned successfully
        '403':
          description: Unauthorized
        '404':
          description: Role or User not found

  /users/{id}/orders:
    post:
      summary: Place an order
      tags:
        - Orders
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: string
      requestBody:
        description: Order details
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                cartId:
                  type: string
                  description: Cart ID
                  required: true
      responses:
        '200':
          description: Order placed successfully
        '400':
          description: Invalid order data
        '403':
          description: Unauthorized

    get:
      summary: Fetch all orders of a user
      tags:
        - Orders
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: string
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
            example: 1
        - name: limit
          in: query
          description: Number of orders per page
          schema:
            type: integer
            example: 10
        - name: sortBy
          in: query
          description: Sort orders by date or order amount
          schema:
            type: string
            enum:
              - created_at
              - total_amount
        - name: orderBy
          in: query
          description: Order restaurants in ascending or descending order
          schema:
            type: string
            enum:
              - ASC
              - DESC
        - name: restaurantId
          in: query
          description: Get orders of a specific restaurant
          schema:
            type: string
 
      responses:
        '200':
          description: Fetched all orders successfully
        '403':
          description: Unauthorized
        '404':
          description: No orders found

  /users/{userId}/orders/{orderId}:
    get:
      summary: Fetch a specific order of a user
      tags:
        - Orders
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          description: User ID
          schema:
            type: string
        - name: orderId
          in: path
          required: true
          description: Order ID
          schema:
            type: string
      responses:
        '200':
          description: Order fetched successfully
        '403':
          description: Unauthorized
        '404':
          description: Order not found

    delete:
      summary: Delete an unsettled order
      tags:
        - Orders
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          description: User ID
          schema:
            type: string
        - name: orderId
          in: path
          required: true
          description: Order ID
          schema:
            type: string
      responses:
        '204':
          description: Order deleted successfully
        '403':
          description: Unauthorized
        '404':
          description: Order not found

  /users/{id}/pending-orders:
    get:
      summary: Get all pending orders for a delivery partner
      tags:
        - Orders
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Delivery Partner ID
          schema:
            type: string
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
            example: 1
        - name: limit
          in: query
          description: Number of orders per page
          schema:
            type: integer
            example: 10
        - name: restaurantId
          in: query
          description: Get orders of a specific restaurant
          schema:
            type: string
      responses:
        '200':
          description: Fetched pending orders successfully
        '403':
          description: Unauthorized
        '404':
          description: No pending orders found
